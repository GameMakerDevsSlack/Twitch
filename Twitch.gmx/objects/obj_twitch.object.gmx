<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create
//
//  2016/10/11
//  
//  Browser-in-Window (using CEF)  - /u/Sidorakh
//  Twitch integration programming - @jujuadams
//  WinDev extension               - yal.cc
//
//
//The full Twitch API is here: github.com/justintv/Twitch-API
//
//Read up on Twitch's authorisation procedure here github.com/justintv/Twitch-API/blob/master/authentication.md
//This implementation uses "Authorization Code Flow" rather than "Implicit Grant Flow".
//
//If and when you want to remove access, visit https://www.twitch.tv/settings/connections and disallow this application's permissions


//--------------
    
    
    //To find/create your client ID and client secret, visit twitch.tv/settings/connections and register your application
    twitch_client_id = "626x6p6t09tiqcd11d5fk182wq4yfuq";
    twitch_client_secret = "kmov55hnw5avwgw5njygv3zhosgmpiu";
    
    //Set the scope of the authorisation. Check out github.com/justintv/Twitch-API/blob/master/authentication.md for more information
    twitch_scope = "user_read";
    
    //Your users will need to port-forward 12075 to use this feature.
    twitch_listen_port = 12075;
    
    //I've had no luck making this a local file, sadly. Use a web server to host a simple page instructing your users to check the client
    twitch_redirect = "about:blank";
    
    //These two variables hold the tokens required for authorised requests. If we're successful, this will change to base64 strings
    twitch_access_token = undefined;
    twitch_refresh_token = undefined;
    
    
    
    //We're using /u/Sidorakh's CEF system (which uses yal.cc's WinDev extension) to open a browser in the game form
    if !RELEASE {
        //Set the RELEASE macro to "false" when you want to build for other people to use
        //Make sure that CEFPath is pointing towards the Chromium browser (and dependencies) in your .gmx project folder
        CEF_path = CEF_DEBUG_PATH;
        if ( code_is_compiled() ) CEF_game_filename = game_project_name else CEF_game_filename = "Runner";
    } else {
        //Set the RELEASE macro to "true" when you want to build for other people to use
        //Make sure to drop a directory containing the Chromium browser (and dependencies) into your .zip file
        CEF_path = CEF_RELEASE_PATH;
        CEF_game_filename = game_project_name + ".exe";
    }
    
    

//--------------

//Init variables / data structures
twitch_listen_state = 0;
twitch_sockets = ds_list_create();
twitch_access_request = noone;

//Create server to listen for responses from Twitch
twitch_listen_server = network_create_server_raw( network_socket_tcp, real( twitch_listen_port ), 1 );
network_set_timeout( twitch_listen_server, 120000, 120000 );

//Direct the user to Twitch to authorise this application
var _url = "https://api.twitch.tv/kraken/oauth2/authorize";
_url += "?response_type=code";
_url += "&amp;client_id=" + twitch_client_id;
_url += "&amp;redirect_uri=" + scr_ggeisha_url_encode( "http://localhost:" + string( twitch_listen_port ) );
_url += "&amp;scope=" + twitch_scope;

scr_cef_start( CEF_path, _url, CEF_game_filename );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy

ds_list_destroy( twitch_sockets );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alarm 1

twitch_listen_server = noone;
network_destroy( twitch_listen_server );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alarm 0

var size = ds_list_size( twitch_sockets );
for( var i = 0; i &lt; size; i++ ) {
    var socket = ds_list_find_value( twitch_sockets, i );
    network_destroy( socket );
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step

if ( keyboard_check_pressed( vk_escape ) ) scr_cef_kill();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Networking Async

var ID     = ds_map_find_value( async_load, "id" );
var type   = ds_map_find_value( async_load, "type" );
var buffer = ds_map_find_value( async_load, "buffer" );

if ( twitch_listen_state == 0 ) {
    
    //Catch connecting sockets
    if ( type == network_type_connect ) {
        
        var socket = ds_map_find_value( async_load, "socket" );
        //var ip = ds_map_find_value( async_load, "ip" );
        
        //show_debug_message( "Connection " + string( socket ) + " / " + string( ip ) );
        
        ds_list_add( twitch_sockets, socket );
        
    }

    //Catch the authorisation response from Twitch
    if ( !is_undefined( buffer ) ) {
        
        //Grab the plaintext from the HTTP response
        var str = buffer_read( buffer, buffer_text );
        
        //Find two key points - the code parameter and everything thereafter until the HTTP version definition (this should catch the "scope" parameter as well)
        var a = string_pos( "code=", str );
        var b = string_pos( " HTTP", str );
        var str = string_copy( str, a + 5, b - a - 5 );
        
        //Divvy up the parameter string
        var ampersand = string_pos( "&amp;", str );
        code = string_copy( str, 1, ampersand - 1 );
        var scope = string_delete( str, 1, ampersand );
        
        //Report an error if the scope is not what we were expecting
        if ( scope != "scope=" + twitch_scope ) show_debug_message( "Malformed scope? &gt;" + str + "&lt;" );
        
        //Immediately send off an HTTP POST using this request token to Twitch
        var body = "client_id=" + twitch_client_id;
        body += "&amp;client_secret=" + twitch_client_secret;
        body += "&amp;grant_type=authorization_code";
        body += "&amp;redirect_uri=" + scr_ggeisha_url_encode( "http://localhost:" + string( twitch_listen_port ) );
        body += "&amp;code=" + code;
        var map = ds_map_create();
        twitch_access_request = http_request( "https://api.twitch.tv/kraken/oauth2/token", "POST", map, body );
        ds_map_destroy( map );
        
        //Also send an HTTP reponse to the browser to redirect it to a proper web page
        var firstSocket = ds_list_find_value( twitch_sockets, 0 );
        var response = "HTTP/1.1 302 Found " + chr(10) + chr(13) + "Location: " + twitch_redirect;
        var sendBuffer = buffer_create( string_length( response ), buffer_fixed, 1 );
        buffer_write( sendBuffer, buffer_text, response );
        network_send_raw( firstSocket, sendBuffer, buffer_tell( sendBuffer ) );
        buffer_delete( sendBuffer );
        
        //Set the server and all sockets to be closed
        alarm[0] = 1;
        alarm[1] = 1;
        
        //Make sure we don't revisit this step
        twitch_listen_state = 1;
        
        scr_cef_kill();
        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HTTP Async
//Simple snippet to catch the incoming token data from Twitch.
//Add your own error checking!

var ID          = ds_map_find_value( async_load, "id" );
var status      = ds_map_find_value( async_load, "status" );
var result      = ds_map_find_value( async_load, "result" );
var url         = ds_map_find_value( async_load, "url" );
var http_status = ds_map_find_value( async_load, "http_status" );

if ( ID == twitch_access_request ) {
    if ( !is_undefined( result ) ) {
        
        var json = json_decode( result );
        twitch_access_token = ds_map_find_value( json, "access_token" );
        twitch_refresh_token = ds_map_find_value( json, "refresh_token" );
        ds_map_destroy( json );
        
        if ( is_undefined( twitch_access_token ) ) or ( is_undefined( twitch_refresh_token ) ) {
            show_message( "Error!#" + result );
        }
        
    } else {
        show_message( "Error!#" + string( status ) + " / " + string( http_status ) + "#" + string( result ) );
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

draw_text( 5, 5, "Access Token = " + string( twitch_access_token ) + "#Request Token = " + string( twitch_refresh_token ) );
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
